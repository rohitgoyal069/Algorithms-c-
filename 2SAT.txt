//https://www.codechef.com/viewsolution/45937204

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
#define hmap gp_hash_table<ll, ll>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

ll find(ll x, ll par[])
{
    if (x == par[x])
        return x;
    return par[x] = find(par[x], par);
}

void unio(ll x, ll y, ll par[], ll rank[])
{
    x = find(x, par);
    y = find(y, par);
    if (x == y)
        return;
    if (rank[x] > rank[y])
    {
        rank[x] = max(rank[x], rank[y] + 1);
        par[y] = x;
    }

    else
    {
        rank[y] = max(rank[y], rank[x] + 1);
        par[x] = y;
    }
}

class SAT {
public:
    ll n;
    vector<vector<ll>> g, gt;
    vector<bool> used;
    vector<ll> order, comp;
    vector<bool> assignment;

    SAT(ll n)
    {
        g = vector<vector<ll>>(2 * n);
        gt = g;
        this->n = n;
    }

    inline ll dash(ll id1)
    {
        if (id1 % 2)
            return id1 - 1;
        return id1 + 1;
    }

    void add_edge(ll a, ll b, bool c1, bool c2)
    {
        ll id1 = 2 * a + c1, id2 = 2 * b + c2;
        g[dash(id1)].pb(id2);
        g[dash(id2)].pb(id1);
        gt[id2].pb(dash(id1));
        gt[id1].pb(dash(id2));
    }


    void dfs1(ll v) {
        used[v] = true;
        for (ll u : g[v]) {
            if (!used[u])
                dfs1(u);
        }
        order.push_back(v);
    }

    void dfs2(ll v, ll cl) {
        comp[v] = cl;
        for (ll u : gt[v]) {
            if (comp[u] == -1)
                dfs2(u, cl);
        }
    }

    bool solve_2SAT() {
        order.clear();
        used.assign(2 * n, false);
        for (ll i = 0; i < 2 * n; ++i) {
            if (!used[i])
                dfs1(i);
        }

        comp.assign(2 * n, -1);
        for (ll i = 0, j = 0; i < 2 * n; ++i) {
            ll v = order[2 * n - i - 1];
            if (comp[v] == -1)
                dfs2(v, j++);
        }

        assignment.assign(n, false);
        for (ll i = 0; i < 2 * n; i += 2) {
            if (comp[i] == comp[i + 1])
                return false;
            assignment[i / 2] = comp[i] > comp[i + 1];
        }
        return true;
    }
};

int main()
{
    FAST/**/

    ll t;
    cin >> t;

    while (t--)
    {
        ll n, d, k;
        cin >> n >> d >> k;

        SAT ob(k);

        pii arr[k];
        rep(k)
        cin >> arr[i].ff >> arr[i].ss;
        map<ll, vector<pii>> col, row;
        rep(k)
        col[arr[i].ff].pb({arr[i].ss, i}), row[arr[i].ss].pb({arr[i].ff, i});

        autoit(row, it)
        sort((it->ss).begin(), (it->ss).end());
        autoit(col, it)
        sort((it->ss).begin(), (it->ss).end());
        ll par[k], rank[k];
        rep(k)
        par[i] = i, rank[i] = 0;
        autoit(row, it)
        {
            vector<pii> &v = it->ss;
            ll siz = v.size();
            for (ll j = 1; j < siz; j++)
                if (v[j].ff - v[j - 1].ff <= d)
                    unio(v[j].ss, v[j - 1].ss, par, rank);
        }

        autoit(col, it)
        {
            vector<pii> &v = it->ss;
            ll siz = v.size();
            for (ll j = 1; j < siz; j++)
                if (v[j].ff - v[j - 1].ff <= d)
                    unio(v[j].ss, v[j - 1].ss, par, rank);
        }

        multiset<pair<ll, pii>> by_col;
        multiset<pii> cols;
        autoit(col, it)
        {
            while (by_col.size() > 0 && it->ff - by_col.begin()->ff > d)
            {
                cols.erase(cols.find({by_col.begin()->ss}));
                by_col.erase(by_col.begin());
            }

            vector<pii> &v = it->ss;
            ll siz = v.size();
            for (ll j = 0; j < siz; j++)
            {
                ll maxi = v[j].ff + d, mini = v[j].ff - d;
                auto ub = cols.upper_bound({maxi, inf});
                auto lb = cols.lower_bound({mini, -1ll});
                if (ub != cols.begin() && (--ub)->ff <= maxi && ub->ff >= mini)
                    unio(ub->ss, v[j].ss, par, rank);
                if (lb != cols.end() && lb->ff <= maxi && lb->ff >= mini)
                    unio(lb->ss, v[j].ss, par, rank);
            }

            for (ll j = 0; j < siz; j++)
            {
                by_col.insert({it->ff, v[j]});
                cols.insert(v[j]);
            }
        }

        autoit(row, it)
        {
            vector<pii> &v = it->ss;
            ll siz = v.size();
            for (ll j = 1; j < siz; j++) {
                ll dis = v[j].ff - v[j - 1].ff;
                ll n1 = find(v[j].ss, par), n2 = find(v[j - 1].ss, par);
                if (dis < 2 * d && dis > d)
                    ob.add_edge(n1, n2, 0, 0);
                else if (dis <= d)
                {
                    ob.add_edge(n1, n2, 0, 0);
                    ob.add_edge(n1, n2, 0, 1);
                    ob.add_edge(n1, n2, 1, 0);
                }
            }
        }

        autoit(col, it)
        {
            vector<pii> &v = it->ss;
            ll siz = v.size();
            for (ll j = 1; j < siz; j++) {
                ll dis = v[j].ff - v[j - 1].ff;
                ll n1 = find(v[j].ss, par), n2 = find(v[j - 1].ss, par);
                if (dis < 2 * d && dis > d)
                    ob.add_edge(n1, n2, 1, 1);
                else if (dis <= d)
                {
                    //cout<<"exec\n";
                    ob.add_edge(n1, n2, 1, 1);
                    ob.add_edge(n1, n2, 0, 1);
                    ob.add_edge(n1, n2, 1, 0);
                    //cout<<"en\n";
                }
            }
        }

        bool pos = ob.solve_2SAT();
        if (!pos)
        {
            cout << "No\n";
            continue;
        }
        cout << "Yes\n";
        rep(k)
        cout << (ob.assignment[find(i, par)] ^ 1) << " ";
        cout << '\n';

    }

    return 0;
}


