//https://codeforces.com/gym/102787/submission/113046897
//https://codeforces.com/gym/102787/submission/113049018

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
#define hmap gp_hash_table<ll, ll>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

#define P1 37
#define P2 53
#define M1 mod
#define M2 1000000009

#define N 600005

ll e1[N], e2[N];

typedef struct item * pitem;
struct item {
    ll prior, value, cnt;
    pii fhash, rhash;
    bool rev;
    pitem l, r;
    item() {}
    item(ll prior, ll value): prior(prior), value(value), cnt(0), l(NULL), r(NULL) {}
};

class Treap {

public:
    pitem root;
    Treap()
    {
        root = NULL;
    }

    ll cnt (pitem it) {
        return it ? it->cnt : 0;
    }

    void upd_cnt (pitem it) {
        if (it) {
            it->cnt = cnt(it->l) + cnt(it->r) + 1;
            it->fhash = mp(
                            ((it->l ? (it->l->fhash.ff) : 0) + e1[cnt(it->l)] * (it->value) + (e1[cnt(it->l) + 1] * (it->r ? (it->r->fhash.ff) : 0))) % M1,
                            ((it->l ? (it->l->fhash.ss) : 0) + e2[cnt(it->l)] * (it->value) + (e2[cnt(it->l) + 1] * (it->r ? (it->r->fhash.ss) : 0))) % M2
                        );

            it->rhash = mp(
                            ((it->r ? (it->r->rhash.ff) : 0) + e1[cnt(it->r)] * (it->value) + (e1[cnt(it->r) + 1] * (it->l ? (it->l->rhash.ff) : 0))) % M1,
                            ((it->r ? (it->r->rhash.ss) : 0) + e2[cnt(it->r)] * (it->value) + (e2[cnt(it->r) + 1] * (it->l ? (it->l->rhash.ss) : 0))) % M2
                        );
        }
    }

    void insert (pitem & t, pitem it, ll key) {
        pitem rt;
        split(t, t, rt, key, 0);
        merge(t, t, it);
        merge(t, t, rt);
    }

    void push (pitem it) {
        if (it && it->rev) {
            it->rev = false;
            swap (it->l, it->r);
            if (it->l)  it->l->rev ^= true;
            if (it->r)  it->r->rev ^= true;
        }
    }

    void merge (pitem & t, pitem l, pitem r) {
        push (l);
        push (r);
        if (!l || !r)
            t = l ? l : r;
        else if (l->prior > r->prior)
            merge (l->r, l->r, r),  t = l;
        else
            merge (r->l, l, r->l),  t = r;
        upd_cnt (t);
    }

    void split (pitem t, pitem & l, pitem & r, ll key, ll add = 0) {                    //Splits into 2 treaps with range [0,key-1](of size key) and [key,inf]
        if (!t)
            return void( l = r = 0 );
        push (t);
        ll cur_key = add + cnt(t->l);
        if (key <= cur_key)
            split (t->l, l, t->l, key, add),  r = t;
        else
            split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
        upd_cnt (t);
    }

    void reverse (pitem t, ll l, ll r) {
        pitem t1, t2, t3;
        split (t, t1, t2, l);
        split (t2, t2, t3, r - l + 1);
        t2->rev ^= true;
        merge (t, t1, t2);
        merge (t, t, t3);
    }

    void del(pitem &t, ll l, ll r)
    {
        pitem rt, er;
        split(t, t, rt, l, 0);
        split(rt, er, rt, r - l + 1, 0);
        merge(t, t, rt);
    }

    void output (pitem t) {
        if (!t)  return;
        push (t);
        output (t->l);
        cout << t->value << " ";
        output (t->r);
    }
};

int main()
{
    FAST/**/

    e1[0] = e2[0] = 1;
    for (ll i = 1; i < N; i++)
        e1[i] = (e1[i - 1] * P1) % M1, e2[i] = (e2[i - 1] * P2) % M2;

    ll n, q;
    cin >> n >> q;

    Treap tr;
    item arr[n + q];
    rep(n) {
        char ch;
        cin >> ch;
        arr[i] = item(mt(), (ll)ch);
        tr.insert(tr.root, &arr[i], i);
    }
    for (ll i = 0; i < q; i++)
    {
        ll ty;
        cin >> ty;

        if (ty == 1)
        {
            ll l, r;
            cin >> l >> r;
            r--, l--;
            tr.del(tr.root, l, r);
        }

        else if (ty == 2)
        {
            char c;
            cin >> c;
            ll p;
            cin >> p;
            p--;
            arr[i + n] = (item(mt(), (ll)c));
            tr.insert(tr.root, &arr[i + n], p);
        }

        else
        {
            ll l, r;
            cin >> l >> r;
            l--, r--;
            pitem lft, cen, rt;
            tr.split(tr.root, lft, cen, l, 0);
            tr.split(cen, cen, rt, r - l + 1, 0);
            if (cen->fhash == cen->rhash)
                cout << "yes\n";
            else cout << "no\n";

            tr.merge(tr.root, lft, cen);
            tr.merge(tr.root, tr.root, rt);
        }
    }

    return 0;
}



