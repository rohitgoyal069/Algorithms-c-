#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef int ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

class SuffixArray
{
    public:
    
    vector<vector<ll>> cno;
    vector<ll> suffix;
    vector<ll> lcp;
    ll n;
    string s;
    const ll alphabet = 256;
    
    SuffixArray(string s, bool append = true)
    {
        this->n = s.length();
        if(append)
            s+='$';
        this->s = s;
        suffix = buildSuffix(s);
        if(append)
            suffix.erase(suffix.begin()), this->s.pop_back();
        lcp = buildLcp(this->s,suffix);
    }
    
    vector<ll> buildSuffix(string const& s) {
        
        ll n = s.size();
        vector<ll> p(n), c(n), cnt(max(alphabet, n), 0);
        for (ll i = 0; i < n; i++)
            cnt[s[i]]++;
        for (ll i = 1; i < alphabet; i++)
            cnt[i] += cnt[i-1];
        for (ll i = 0; i < n; i++)
            p[--cnt[s[i]]] = i;
        c[p[0]] = 0;
        ll classes = 1;
        for (ll i = 1; i < n; i++) {
            if (s[p[i]] != s[p[i-1]])
                classes++;
            c[p[i]] = classes - 1;
        }
        cno.pb(c);
        vector<ll> pn(n), cn(n);
        for (ll h = 0; (1 << h) < n; ++h) {
            for (ll i = 0; i < n; i++) {
                pn[i] = p[i] - (1 << h);
                if (pn[i] < 0)
                    pn[i] += n;
            }
            fill(cnt.begin(), cnt.begin() + classes, 0);
            for (ll i = 0; i < n; i++)
                cnt[c[pn[i]]]++;
            for (ll i = 1; i < classes; i++)
                cnt[i] += cnt[i-1];
            for (ll i = n-1; i >= 0; i--)
                p[--cnt[c[pn[i]]]] = pn[i];
            cn[p[0]] = 0;
            classes = 1;
            for (ll i = 1; i < n; i++) {
                pair<ll, ll> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
                pair<ll, ll> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
                if (cur != prev)
                    ++classes;
                cn[p[i]] = classes - 1;
            }
            c.swap(cn);
            cno.pb(c);
        }
        return p;
    }
    
    vector<ll> buildLcp(string const& s, vector<ll> const& p) {
        ll n = s.size();
        vector<ll> rank(n, 0);
        for (ll i = 0; i < n; i++)
            rank[p[i]] = i;
    
        ll k = 0;
        vector<ll> lcp(n-1, 0);
        for (ll i = 0; i < n; i++) {
            if (rank[i] == n - 1) {
                k = 0;
                continue;
            }
            ll j = p[rank[i] + 1];
            while (i + k < n && j + k < n && s[i+k] == s[j+k])
                k++;
            lcp[rank[i]] = k;
            if (k)
                k--;
        }
        return lcp;
    
    }
    
    ll lower_bound(string &a)
    {
        ll start = 0;
        ll end = n-1;
        ll ans = n;
        
        ll len = a.length();
        
        while(end>=start)
        {
            ll mid = (start + end)/2;
            string s1 = s.substr(suffix[mid],min(n-suffix[mid],len));
            if(s1>=a)
            {
                ans = mid;
                end = mid - 1;
            }
            
            else
                start = mid + 1;
        }
        return ans;
    }
    
    ll upper_bound(string &a)
    {
        ll start = 0;
        ll end = n-1;
        ll ans = n;
        
        ll len = a.length();
        
        while(end>=start)
        {
            ll mid = (start + end)/2;
            string s1 = s.substr(suffix[mid],min(n-suffix[mid],len));
            if(s1>a)
            {
                ans = mid;
                end = mid - 1;
            }
            
            else
                start = mid + 1;
        }
        return ans;
    }
    
};


int main()
{
  FAST/**/
   
   SuffixArray s("abaab");
   rep(s.suffix.size())
        cout<<s.suffix[i]<<" ";
   
   return 0;        
}  

  
          
   