
void tsort(vector<ll> adj[], ll V, vector<ll> &topo) 
{ 
    vector<ll> in_degree(V, 0); 
    for (ll u = 0; u < V; u++) {
        for (auto itr = adj[u].begin(); itr != adj[u].end(); itr++) 
            in_degree[*itr]++; 
    } 
    deque<ll> q; 
    for (ll i = 0; i < V; i++) 
        if (in_degree[i] == 0) 
            q.push_back(i); 
  
    ll cnt = 0; 
    vector<ll> top_order; 
    while (!q.empty()) { 
        ll u = q.front(); 
        q.pop_front(); 
        top_order.push_back(u); 
        for (auto itr = adj[u].begin(); 
             itr != adj[u].end(); itr++) 
            if (--in_degree[*itr] == 0) 
                q.push_front(*itr); 
  
        cnt++; 
    } 
  
   
    for (ll i = 0; i < top_order.size(); i++) 
        topo.pb(top_order[i]);
    return;
} 

enum Color {WHITE, GRAY, BLACK}; 

bool DFSUtil(ll u, ll color[], vector<ll> adj[]) 
{
    color[u] = GRAY; 

    for (auto i = adj[u].begin(); i != adj[u].end(); ++i) 
    { 
        ll v = *i; 
        if (color[v] == GRAY) 
          return true; 
        if (color[v] == WHITE && DFSUtil(v, color,adj)) 
          return true; 
    } 
    color[u] = BLACK; 
  
    return false; 
} 

bool check(vector<ll> adj[], ll V) 
{ 
    ll *color = new ll[V]; 
    for (ll i = 0; i < V; i++) 
        color[i] = WHITE; 
  
    for (ll i = 0; i < V; i++) 
        if (color[i] == WHITE) 
           if (DFSUtil(i, color,adj) == true) 
              return true; 
  
    return false; 
}
