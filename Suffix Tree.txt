//https://www.codechef.com/viewsolution/44463326
//https://codeforces.com/contest/128/submission/111826807

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

//Height of suffix tree is atmosst log2(N)
//There are around 2*N nodes in the suffix tree
//Each node has atleast 2 children or it is a leaf node
//There are atmost alphabet size( ~ 26 ) children for each node
//Number of distinct substrings = sum of length of all edges in the tree

struct node {
    ll l, r;                                // [L, R-1] boundry for the edge to this node
    ll par;                                 // parent id of the current node, for root = -1
    ll link;                                //suffix link, for v -> s(v)
    map<char, ll> next;                     // pointer id of children nodes
    ll lensum, subcnt;                              // count of substrings starting at this node and sum of their lengths
    map<char, ll> lsum, scnt;

    node (ll l = 0, ll r = 0, ll par = -1)
        : l(l), r(r), par(par), link(-1), lensum(0), subcnt(0) {}
    ll len()  {  return max(r - l, 0ll);  }
    ll &get (char c) {
        if (!next.count(c))  next[c] = -1;
        return next[c];
    }
};

struct state {
    ll v, pos;
    state() {}
    state (ll v, ll pos) : v(v), pos(pos)  {}
};

class SuffTree
{
public:
    string s;               //string to build suffix tree on
    vector<node> t;         //nodes of suffix tree structure, node[0] is the root of the tree
    ll n;                   //size of the string
    state ptr;
    ll sz;                  //size - 1 for vector t
    ll subs;                //number of substrings in the string
    ll leaves;
    bool append;
    char def;
    ll lid, rid;

    
    SuffTree(string s, bool append = true, char def = '$')
    {
        lid = 0, rid = 0;
        this->sz = 1;
        this->append = append;
        this->def = def;
        leaves = subs = 0;
        this->s = s;
        if (append) {
            this->s += def;
        }
        this->n = this->s.length();
        
        
        
        ptr = state(0, 0);
        t = vector<node>(3*(this->n) + 10, node());
        build_tree();
        if (append){
            subs -= ((ll)s.length());
            this->s.pop_back();
            this->n = this->s.length();
        }
        substringCount(0, 0);
    }

    void build_tree() {

        this->sz = 1;
        for (ll i = 0; i < n; ++i)
            tree_extend (i);
    }

    void substringCount(ll id, ll clen)
    {
        if (t[id].next.size() == 0)
            t[id].lensum = 0, t[id].subcnt = (clen > 0 || t[id].par > 0);
        autoit(t[id].next, it)
        {
            if(t[it->ss].next.size() == 0)
                t[it->ss].r = s.length();
            ll l = t[it->ss].len();
            substringCount(it->ss, clen + l);
            t[id].lsum[it->ff] = t[it->ss].lensum + t[it->ss].len()*t[it->ss].subcnt, t[id].lensum += t[id].lsum[it->ff];
            t[id].scnt[it->ff] = t[it->ss].subcnt, t[id].subcnt += t[id].scnt[it->ff];
        }
    }

    state go (state st, ll l, ll r) {
        while (l < r)
            if (st.pos == t[st.v].len()) {
                st = state (t[st.v].get( s[l] ), 0);
                if (st.v == -1)  return st;
            }
            else {
                if (s[ t[st.v].l + st.pos ] != s[l])
                    return state (-1, -1);
                if (r - l < t[st.v].len() - st.pos)
                    return state (st.v, st.pos + r - l);
                l += t[st.v].len() - st.pos;
                st.pos = t[st.v].len();
            }
        return st;
    }

    ll split (state st) {
        if (st.pos == t[st.v].len())
            return st.v;
        if (st.pos == 0)
            return t[st.v].par;
        node v = t[st.v];
        ll id = sz++;
        t[id] = node (v.l, v.l + st.pos, v.par);
        t[v.par].get( s[v.l] ) = id;
        t[id].get( s[v.l + st.pos] ) = st.v;
        t[st.v].par = id;
        t[st.v].l += st.pos;
        return id;
    }

    ll get_link (ll v) {
        if (t[v].link != -1)  return t[v].link;
        if (t[v].par == -1)  return 0;
        ll to = get_link (t[v].par);
        return t[v].link = split (go (state(to, t[to].len()), t[v].l + (t[v].par == 0), t[v].r));
    }

    void tree_extend (ll pos) {
        for (;;) {
            state nptr = go (ptr, pos, pos + 1);
            if (nptr.v != -1) {
                ptr = nptr;
                break;
            }

            ll mid = split (ptr);
            ll leaf = sz++;
            leaves++;
            t[leaf] = node (pos, n , mid);
            t[mid].get( s[pos] ) = leaf;

            ptr.v = get_link (mid);
            ptr.pos = t[ptr.v].len();
            if (!mid)  break;
        }

        subs += leaves;
    }

    ll search(string p)
    {
        if (p.length() == 0)
            return -1;
        ll m = p.length();
        ll pr = 0, id = 0;
        while (pr < m)
        {
            if (t[id].get(p[pr]) == -1)
                return false;
            auto id1 = t[id].get(p[pr]);
            ll len = min(t[id1].len(), m - pr);
            for (ll j = t[id1].l; j < t[id1].l + len; j++)
            {
                if (s[j] != p[pr++])
                    return -1;
            }

            if (pr == m) {
                return t[id1].r - t[id1].len() + len - m;
            }
            id = id1;
        }

        return -1;
    }

    void findRecKth(ll id, ll k, vector<ll> &hold, string &fin, ll off)
    {
        autoit(t[id].next, it)
        {
            if (it->ff == def)
                continue;
            if(t[id].lsum[it->ff] < k)
            {
                k -= t[id].lsum[it->ff];
                continue;
            }
            
            hold.pb(it->ss);
            
            ll len = t[it->ss].len();
            
            if(len*t[it->ss].subcnt >= k)
            {
                ll al = (k-1)/t[it->ss].subcnt;
                off += al + 1;
                autoit(hold, it)
                {
                    ll l = min(t[*it].len(), off);
                    off-=l;
                    fin+=s.substr(t[*it].l, l);
                }
                return;
            }
            
            k -= len*t[it->ss].subcnt;
            off+=len;
            findRecKth(it->ss, k, hold, fin, off);
            return;

        }

    }

    void findKth(ll k, string &f)
    {
        vector<ll> hold;
        findRecKth(0, k, hold, f, 0);
    }
};


int main()
{
    FAST/**/

    string s;
    cin>>s;
    
    ll k;
    cin>>k;
    
    ll n = s.length();
    
    SuffTree obj(s);
    if(k > (n*(n+1))/2)
            cout<<"No such line.\n";
    else 
    {
        string f;
        obj.findKth(k,f);
        cout<<f<<"\n";
    }
    



    return 0;
}
