//https://www.spoj.com/status/ADASTRNG,rohit_goyal/

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
#define hmap gp_hash_table<ll, ll>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

/*

- There are atmost 2*N-1 states in a suffix automaton
- Minimal length for a node v is len(link(v)) + 1
- Build time is O(N*log(K))
- Number of distinct substrings in a string : Summation over all nodes (len(v) - len(link(v)))
- Each unique path from root describes a unique string in the automaton
- Endpos set of link(v) is superset of Endpos set of v
- Each new addition in the automata (cur variable) at step i corresponds to the state corresponding to prefix[0,i] which is the largest in its set
- Number of nodes whose endpos is subset of the endpos of a node is proportional to the endpos size of that node
  (because in the tree, each parent has at least 2 children)
*/

struct state {
    ll len;                     //len is the length of the longest suffix for the particular node
    ll link;                    //suffix link for the current node
    map<char, ll> next;         //node corresponding to addition of single character
    ll cnt;
    ll endpos;                  //Size of the set endpos for this node or number of positions that have this suffix in the string
    ll fstpos;                  //First position in the endpos set of suffix indices
    bool isPref;

    state()
    {
        len = 0;
        link = -1;
        cnt = -1;
        endpos = 0;
        isPref = false;
    }
};

class SAutomata {

public:
    vector<state> st;
    ll sz;
    ll last;                      //State corresponding to current complete string
    ll n;
    ll dcnt;
    string s;
    vector<vector<ll>> gr;

    SAutomata(string s)
    {
        st.pb(state());
        st[0].len = 0;
        st[0].link = -1;
        sz = 1;
        last = 0;
        dcnt = 0;

        this->s = s;
        this->n = n;

        for (auto &x : s)
            sa_extend(x);
        getCnt(0);
        makeLinkGraph();
        eposdfs(0);
    }

    void makeLinkGraph()
    {
        gr.resize(sz);
        for (ll i = 0; i < sz; i++)
            if (st[i].link != -1)
                gr[st[i].link].pb(i);
    }

    void getCnt(ll curr)
    {
        st[curr].cnt = 1;
        autoit(st[curr].next, it)
        {
            if (st[it->ss].cnt == -1)
                getCnt(it->ss);
            st[curr].cnt += st[it->ss].cnt;
        }
    }

    void eposdfs(ll curr)
    {
        autoit(gr[curr], it)
        {
            eposdfs(*it);
            st[curr].endpos += st[*it].endpos;
        }
    }

    vector<ll> getOccEnding(ll id)
    {
        vector<ll> occ;
        queue<ll> q;
        q.push(id);
        while (q.size() > 0)
        {
            auto curr = q.front();
            q.pop();

            if (st[curr].isPref)
                occ.pb(st[curr].fstpos);

            autoit(gr[curr], it)
            q.push(*it);
        }

        return occ;
    }

    void sa_extend(char c) {
        ll cur = sz++;
        st.pb(state());
        st[cur].len = st[last].len + 1;
        dcnt += (st[cur].len);
        st[cur].endpos = 1;
        st[cur].fstpos = st[cur].len - 1;
        st[cur].isPref = true;

        ll p = last;
        while (p != -1 && !st[p].next.count(c)) {
            st[p].next[c] = cur;
            p = st[p].link;
        }
        if (p == -1) {
            st[cur].link = 0;
            dcnt -= st[0].len;
        } else {
            ll q = st[p].next[c];
            if (st[p].len + 1 == st[q].len) {
                st[cur].link = q;
                dcnt -= st[q].len;
            } else {
                ll clone = sz++;
                st.pb(state());
                st[clone].len = st[p].len + 1;
                st[clone].next = st[q].next;
                st[clone].link = st[q].link;
                st[clone].fstpos = st[q].fstpos;
                dcnt += st[clone].len - ((st[clone].link == -1) ? 0 : st[st[clone].link].len);
                while (p != -1 && st[p].next[c] == q) {
                    st[p].next[c] = clone;
                    p = st[p].link;
                }
                dcnt += ((st[q].link == -1) ? 0 : st[st[q].link].len);
                st[q].link = st[cur].link = clone;
                dcnt -= 2 * st[clone].len;
            }
        }
        last = cur;
    }

    ll lcp(string a)
    {
        ll ans = 0, curr = 0;
        while (ans < a.length())
        {
            if (!st[curr].next.count(a[ans]))
                break;
            ans++;
        }
        return ans;
    }

    string findKth(ll k)
    {
        if (k > dcnt || k < 1)
            return "";
        ll curr = 0;
        string ans;
        while (k > 0)
        {
            autoit(st[curr].next, it)
            {
                if (st[it->ss].cnt < k)
                {
                    k -= st[it->ss].cnt;
                    continue;
                }
                ans += it->ff;
                curr = it->ss;
                k--;
                break;
            }
        }

        return ans;
    }


};


int main()
{
    FAST/**/

    string s;
    cin >> s;

    ll n = s.length();
    vector<ll> ins[n + 2], rem[n + 2];
    SAutomata ob(s);
    for (ll i = 1; i < ob.sz; i++)
    {
        ll lmax = ob.st[i].len;
        ll lmin = 1;
        if (ob.st[i].link != -1)
            lmin = ob.st[ob.st[i].link].len + 1;
        if (lmin <= lmax)
            ins[lmin].pb(ob.st[i].endpos), rem[lmax + 1].pb(ob.st[i].endpos);
    }

    multiset<ll> ms;
    for (ll i = 1; i <= n; i++)
    {
        autoit(rem[i], it)
        ms.erase(ms.find(*it));
        autoit(ins[i], it)
        ms.insert(*it);
        if (ms.size() > 0)
            cout << *ms.rbegin() << '\n';
    }


    return 0;
}


