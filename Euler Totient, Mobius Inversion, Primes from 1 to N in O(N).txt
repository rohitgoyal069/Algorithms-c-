#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
#define hmap gp_hash_table<ll, ll>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

vector<ll> mu, phi, primes;

void calc(ll n)
{
    mu.resize(n + 1);
    phi.resize(n + 1);
    primes.clear();

    bool isp[n + 1];
    rep(n + 1)
    isp[i] = true;
    isp[0] = isp[1] = false;
    mu[1] = 1, phi[1] = 1;
    for (ll i = 2; i <= n; i++)
    {
        if (isp[i])
        {
            phi[i] = i - 1;
            primes.pb(i);
            mu[i] = -1;
        }

        ll tmp = n / i;

        for (ll j = 0; j < primes.size() && primes[j] <= tmp; j++)
        {
            isp[primes[j]*i] = false;
            if (i % primes[j] == 0)
            {
                phi[i * primes[j]] = primes[j] * phi[i];
                mu[i * primes[j]] = 0;
                break;
            }

            mu[i * primes[j]] = (mu[i] * mu[primes[j]]);
            phi[i * primes[j]] = (phi[i] * phi[primes[j]]);
        }
    }

}

int main()
{
    FAST/**/


    return 0;
}


