//https://codeforces.com/gym/100551/submission/112885870

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef int ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define pii pair<ll,ll>
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define autoitr(x,it) for(auto it = x.rbegin(); it != x.rend(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
#define hmap gp_hash_table<ll, ll>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());

class onlineBridges {

public:
    ll n;
    multiset<pii> bset;
    vector<ll> par, dsu_2ecc, dsu_cc, dsu_cc_size;
    ll bridges;
    ll lca_iteration;
    vector<ll> last_visit;

    onlineBridges(ll n)
    {
        this->n = n;
        init(n);
    }

    void init(ll n) {
        par.resize(n);
        bset.clear();
        dsu_2ecc.resize(n);
        dsu_cc.resize(n);
        dsu_cc_size.resize(n);
        lca_iteration = 0;
        last_visit.assign(n, 0);
        for (ll i = 0; i < n; ++i) {
            dsu_2ecc[i] = i;
            dsu_cc[i] = i;
            dsu_cc_size[i] = 1;
            par[i] = -1;
        }
        bridges = 0;
    }

    ll find_2ecc(ll v) {
        if (v == -1)
            return -1;
        return dsu_2ecc[v] == v ? v : dsu_2ecc[v] = find_2ecc(dsu_2ecc[v]);
    }

    ll find_cc(ll v) {
        v = find_2ecc(v);
        return dsu_cc[v] == v ? v : dsu_cc[v] = find_cc(dsu_cc[v]);
    }

    void make_root(ll v) {
        v = find_2ecc(v);
        ll root = v;
        ll child = -1;
        while (v != -1) {
            ll p = find_2ecc(par[v]);
            par[v] = child;
            dsu_cc[v] = root;
            child = v;
            v = p;
        }
        dsu_cc_size[root] = dsu_cc_size[child];
    }

    void merge_path (ll a, ll b) {
        ++lca_iteration;
        vector<ll> path_a, path_b;
        ll lca = -1;
        while (lca == -1) {
            if (a != -1) {
                a = find_2ecc(a);
                path_a.push_back(a);
                if (last_visit[a] == lca_iteration) {
                    lca = a;
                    break;
                }
                last_visit[a] = lca_iteration;
                a = par[a];
            }
            if (b != -1) {
                b = find_2ecc(b);
                path_b.push_back(b);
                if (last_visit[b] == lca_iteration) {
                    lca = b;
                    break;
                }
                last_visit[b] = lca_iteration;
                b = par[b];
            }

        }

        for (ll v : path_a) {
            dsu_2ecc[v] = lca;
            if (v == lca)
                break;
            //bset.erase(bset.find(mp(min(v,par[v]),max(par[v],v))));               //Uncomment this line to get bridges themselves
            --bridges;
        }
        for (ll v : path_b) {
            dsu_2ecc[v] = lca;
            if (v == lca)
                break;
            //bset.erase(bset.find(mp(min(v,par[v]),max(par[v],v))));               //Uncomment this line to get bridges themselves
            --bridges;
        }
    }

    void add_edge(ll a, ll b) {
        a = find_2ecc(a);
        b = find_2ecc(b);
        if (a == b)
            return;

        ll ca = find_cc(a);
        ll cb = find_cc(b);

        if (ca != cb) {
            ++bridges;
            //bset.insert(mp(min(a,b),max(a,b)));                                 //Uncomment this line to get bridges themselves
            if (dsu_cc_size[ca] > dsu_cc_size[cb]) {
                swap(a, b);
                swap(ca, cb);
            }
            make_root(a);
            par[a] = dsu_cc[a] = b;
            dsu_cc_size[cb] += dsu_cc_size[a];
        } else {
            merge_path(a, b);
        }
    }
};

int main()
{
    FAST/**/

    ll n, m;
    cin >> n >> m;

    onlineBridges ob(n);
    rep(m)
    {
        ll a, b;
        cin >> a >> b;
        a--, b--;
        ob.add_edge(a, b);
    }
    ll k;
    cin >> k;

    rep(k)
    {
        ll a, b;
        cin >> a >> b;
        a--, b--;
        ob.add_edge(a, b);
        cout << ob.bridges << "\n";
    }

    return 0;
}


